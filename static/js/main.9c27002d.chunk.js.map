{"version":3,"sources":["components/FaceRecognition/FaceRecognition.js","components/ImageLinkForm/ImageLinkForm.js","components/Details/Details.js","App.js","serviceWorker.js","index.js"],"names":["FaceRecognition","imageUrl","boundingBox","boxes","map","box","console","log","className","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","id","alt","src","width","height","ImageLinkForm","onInputChange","onButtonSubmit","input","type","onChange","value","onClick","Details","length","app","Clarifai","App","apiKey","calculateFaceLocation","data","faces","bar","push","outputs","regions","image","document","getElementById","Number","i","clarifaiFace","region_info","bounding_box","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","state","event","target","alert","models","predict","FACE_DETECT_MODEL","then","response","forEach","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c27002d.chunk.js","sourcesContent":["import React from 'react';\nimport './FaceRecognition.css';\nconst FaceRecognition = ({ imageUrl, boxes }) => {\n  const boundingBox = boxes.map((box) => {\n    console.log(box);\n    return (\n      <div\n        className='bounding-box'\n        style={{\n          top: box.topRow,\n          right: box.rightCol,\n          bottom: box.bottomRow,\n          left: box.leftCol\n        }}\n      ></div>\n    );\n  });\n\n  return (\n    <div className='center ma'>\n      <div className='absolute mt2'>\n        <img\n          id='inputimage'\n          alt='Face Detection'\n          src={imageUrl}\n          width='600px'\n          height='auto'\n        />\n        {boundingBox}\n      </div>\n    </div>\n  );\n};\n\nexport default FaceRecognition;\n","import React from \"react\";\n\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit, input }) => {\n  return (\n    <div>\n      <p className=\"f3 white\">\n        {\"Detect faces and details in your pictures. Give it a try!\"}\n      </p>\n      <p className=\"f5 white\">\n        {\"(Provide an image URL)\"}\n      </p>\n      <div className=\"center\">\n        <div className=\"pa4 br3 shadow-5 w-70\">\n          <input className=\"f4 pa2 w-90 center\" type=\"text\" onChange={onInputChange} value={input} />\n          <button className=\"w-30 grow f4 link ph3 pv2 dib white bg-light-purple mt2\" onClick={onButtonSubmit}>\n            Detect\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageLinkForm;\n","import React from 'react'\n\nfunction Details(length) {\n    return (\n        <p className=\"f3 white\">{length.length} faces were detected</p>\n    )\n}\n\nexport default Details\n","import React, { Component } from 'react';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Details from './components/Details/Details';\nimport Clarifai from 'clarifai';\nimport './App.css';\n\nconst app = new Clarifai.App({\n    apiKey: 'e46a7ef2900e4f8cb66232bbe12f643d',\n});\n\nexport default class App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            input: '',\n            imageUrl: '',\n            boxes: [],\n        };\n    }\n\n    calculateFaceLocation = (data) => {\n        let faces = [];\n        let bar = [];\n        faces.push(data.outputs[0].data.regions);\n        console.log(faces);\n        console.log(faces[0].length);\n        const image = document.getElementById('inputimage');\n        const width = Number(image.width);\n        const height = Number(image.height);\n        for (let i = 0; i < faces[0].length; i++) {\n            let clarifaiFace = faces[0][i].region_info.bounding_box;\n            console.log(clarifaiFace);\n            bar.push({\n                leftCol: clarifaiFace.left_col * width,\n                topRow: clarifaiFace.top_row * height,\n                rightCol: width - clarifaiFace.right_col * width,\n                bottomRow: height - clarifaiFace.bottom_row * height,\n            });\n        }\n        return bar;\n    };\n\n    displayFaceBox = (box) => {\n        this.setState({ boxes: [...this.state.boxes, box] });\n    };\n\n    onInputChange = (event) => {\n        this.setState({ input: event.target.value });\n    };\n\n    onButtonSubmit = () => {\n        if (!this.state.input) {\n            alert('Input a valid image link!');\n        }\n        this.setState({\n            imageUrl: this.state.input,\n            input: '',\n        });\n        app.models\n            .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n            .then((response) => {\n                console.log('response', response);\n                const boxes = this.calculateFaceLocation(response);\n                boxes.forEach((box) => this.displayFaceBox(box));\n            })\n            .catch((err) => console.log(err));\n    };\n\n    render() {\n        return (\n            <div className='App'>\n                <ImageLinkForm\n                    input={this.state.input}\n                    onInputChange={this.onInputChange}\n                    onButtonSubmit={this.onButtonSubmit}\n                />\n                <Details length={this.state.boxes.length} />\n                <FaceRecognition\n                    boxes={this.state.boxes}\n                    imageUrl={this.state.imageUrl}\n                />\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}